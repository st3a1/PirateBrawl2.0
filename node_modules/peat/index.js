// Generated by LiveScript 1.2.0
(function(){
  var Part, Header, Status, out$ = typeof exports != 'undefined' && exports || this;
  out$.Part = Part = (function(){
    Part.displayName = 'Part';
    var prototype = Part.prototype, constructor = Part;
    Part.is = function(v){
      var k;
      k = v.constructor;
      do {
        if (k.displayName === 'Part') {
          return v;
        }
      } while (k = k.superclass);
      return false;
    };
    prototype.run = function(){
      throw new Error('abstract');
    };
    function Part(){}
    return Part;
  }());
  out$.Header = Header = (function(superclass){
    var prototype = extend$((import$(Header, superclass).displayName = 'Header', Header), superclass).prototype, constructor = Header;
    function Header(name, value){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.name = name;
      this$.value = value;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.run = function(res){
      return res.setHeader(this.name, this.value);
    };
    return Header;
  }(Part));
  out$.Status = Status = (function(superclass){
    var prototype = extend$((import$(Status, superclass).displayName = 'Status', Status), superclass).prototype, constructor = Status;
    function Status(code){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.code = code;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.run = function(res){
      return res.statusCode = this.code;
    };
    return Status;
  }(Part));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
