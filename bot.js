const fs = require('fs').promises;
const { Telegraf, Markup } = require('telegraf');
const LocalSession = require('telegraf-session-local');
const processHashtag = require('./lowID');
const config = require('./config.json');
var tgacc = require('./PirateBrawl.Titan/JSON/tgacc.json');
const vips = require('./PirateBrawl.Titan/JSON/vips.json');
const Authors = require("./PirateBrawl.Titan/JSON/Authors.json");

const database = require("./PirateBrawl.Server/Database/DatabaseManager");

const token = null;
const bot = new Telegraf(token);

const Shop = require("./PirateBrawl.Server/Utils/Shop");
const Gameroom = require('./PirateBrawl.Server/Utils/Gameroom');
const gameroomInstance = new Gameroom();

const session = new LocalSession({
    database: 'sessions.json',
    storage: LocalSession.storageFileAsync,
    format: {
      serialize: (obj) => JSON.stringify(obj, null, 2),
      deserialize: (str) => JSON.parse(str),
    },
});
  
bot.use(session.middleware());

bot.command('start', async (ctx) => {
    try {
        const message = await ctx.reply(`üí´ | –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤ [Mix Brawl](${"https://t.me/mixbrawlclose"})\n\n–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –¥–æ–Ω–∞—Ç –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–≤–æ–π –ª—é–±–∏–º—ã–π —Å–µ—Ä–≤–µ—Ä ${config.serverName}Brawl`,
        {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üí∞ –î–æ–Ω–∞—Ç', callback_data: `DonateMenu` },{ text: 'üë• –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: `Supports` }]
                ]
            }
        });
        ctx.session.MessageID = message.message_id;
    } catch (error) {
      config.admins.forEach(async e  => { await ctx.telegram.sendMessage(e, error);});
    }
});

bot.on('text', async (ctx) => {
    const messageText = ctx.message.text;
    const userId = ctx.message.from.id;
    const messageId = ctx.message.message_id;
    await ctx.deleteMessage(messageId);

    try {
        switch (true) {
			case (messageText.startsWith('/newAuthor')): {
			  if (!config.admins.includes(parseInt(userId))) return await ctx.reply('–ù–µ—Ç –ø—Ä–∞–≤! ' + userId);

				const info = messageText.split(' ');
				if (info.length < 2) return await ctx.reply(`–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–µ–≥!`);
				const playerId = processHashtag(info[1]);
				if (playerId === 0) return await ctx.reply(`–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ —Ç–µ–≥!`);
				if (info.length < 3) return await ctx.reply(`–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ö–æ–¥ –ê–≤—Ç–æ—Ä–∞!`);

				const authorCodeData = { CreatorID: parseInt(playerId), CodeName: info[2], Actived: [] };
				Authors.push(authorCodeData);
				vips.push({ id: parseInt(processHashtag(info[1])) });
				fs.writeFile('./Laser.Server/vips.json', JSON.stringify(vips, null, 2));
				fs.writeFile('./Laser.Server/Authors.json', JSON.stringify(Authors, null, 2));
				await ctx.reply('–£—Å–ø–µ—à–Ω–æ!');
				break;
			}
            case (ctx.session.ConnectAccount): {
                const commandParams = messageText.split(' ');
                
                const tag = commandParams[0];
                const regex = /[Oo–û–æ]/;
                
                if (regex.test(tag)){
                    await ctx.telegram.editMessageText(ctx.message.chat.id, ctx.session.MessageID, null,`–¢–µ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—É "O"!\n–ó–∞–º–µ–Ω–∏ –Ω–∞ —Ü–∏—Ñ—Ä—É 0\n\n–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–º–∞–Ω–¥—É —Å–Ω–æ–≤–æ!`,
                        {
                            reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                            parse_mode: 'Markdown' 
                        }
                    );
                    return;
                }
                const playerId = processHashtag(tag);

                if (playerId === 0){
                    await ctx.telegram.editMessageText(ctx.message.chat.id, ctx.session.MessageID, null,`üîå | –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ —Ç–µ–≥! [–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ç–µ–≥?](${"https://telegra.ph/Gde-najti-TEG-igroka-10-15"})\n\n–í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Ç–µ–≥. (–ø—Ä–∏–º–µ—Ä: #2PP)`,
                        {
                            reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                            parse_mode: 'Markdown' 
                        }
                    );
                    return;
                }
                if (tgacc.find(acc => acc.lowID == playerId)){
                    await ctx.telegram.editMessageText(ctx.message.chat.id, ctx.session.MessageID, null,`–î–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω!`,
                        {
                            reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                            parse_mode: 'Markdown' 
                        }
                    );
                    return;
                }


                const account = await database.getAccount(playerId)
                if(account === null){
                    await ctx.telegram.editMessageText(ctx.message.chat.id, ctx.session.MessageID, null,`–î–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ–Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ!\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —á—Ç–æ-—Ç–æ...`,
                        {
                            reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                            parse_mode: 'Markdown' 
                        }
                    );
                    return;
                }
                ctx.session.plrID = playerId;

                account.Notification = account.Notification.filter(notification => !notification.text.startsWith('–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–∏–≤—è–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞.'));

                const newCode = Math.floor(Math.random() * 9999) + 1000;
                account.Notification.push({
                    ID: 81,
                    index: parseInt(account.Notification.length+1),
                    type: 0,
                    date: new Date(),
                    text: `–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–∏–≤—è–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞.\n–í–ê–® –ö–û–î: ${newCode}`
                });
                
                await database.replaceValue(playerId, 'Notification', account.Notification);
                ctx.session.code = newCode;
                await ctx.telegram.editMessageText(
                    ctx.message.chat.id, ctx.session.MessageID, null,
                    `–ü—Ä–∏–≤–µ—Ç ${account.Name}!\n–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏—à–µ–ª –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n–ó–∞–π–¥–∏ –≤ –∏–≥—Ä—É –∏ –∑–∞–ø–æ–º–Ω–∏—Ç–µ –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n/code –í–ê–® –ö–û–î`,
                    {
                        reply_markup: {inline_keyboard: []},
                        parse_mode: 'Markdown' 
                    }
                );
                ctx.session.ConnectAccount = false
                break;
            }
            case (messageText.startsWith('/code')): {
                const commandParams = messageText.split(' ');
              
                if (commandParams.length < 2) return await ctx.reply(`–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∫–æ–¥!`);
                
                const code = commandParams[1];
                if (ctx.session.code === parseInt(code)){
                    ctx.session.code = 0
                    const account = await database.getAccount(ctx.session.plrID);
                    account.Notification = account.Notification.filter(notification => !notification.text.startsWith('–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–∏–≤—è–∑–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞.'));
                    account.Notification = account.Notification.filter(notification => !notification.text.startsWith('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ TailerID'));
                    account.Notification.push({
                      ID: 94,
                      index: parseInt(account.Notification.length)+1,
                      reward: 59,
                      type: 29,
                      date: new Date(),
                      claim: false,
                      text: `–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ TailerID`
                    });
                    await database.replaceValue(ctx.session.plrID, 'Notification', account.Notification);
                    tgacc.push({id: userId,lowID: ctx.session.plrID})
                    await ctx.telegram.editMessageText(
                        ctx.message.chat.id, ctx.session.MessageID, null,
                        `‚úÖ | –í–∞—à –ê–∫–∫–∞—É–Ω—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ TailerID!`,
                        {
                            reply_markup: {inline_keyboard: [[{ text: `‚óÄ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é`, callback_data: `MainMenu` }]]},
                            parse_mode: 'Markdown' 
                        }
                    );
                    ctx.session.plrID = 0;
                    fs.writeFile('./Laser.Server/tgacc.json', JSON.stringify(tgacc, null, 2), (err) => {if (err) {console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:', err)}});
                    break;
                }else{
                    await ctx.reply(`–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∫–æ–¥!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–∏–≤—è–∑–∫—É —Å–Ω–æ–≤–æ.`);
                    break;
                }
            }
            case (ctx.session.Tag2Recovery): {
                const tag = messageText;
                const regex = /[Oo–û–æ]/;
              
                if (regex.test(tag)){
                    await ctx.telegram.editMessageText(ctx.message.chat.id, ctx.session.MessageID, null,`–¢–µ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—É "O"!\n–ó–∞–º–µ–Ω–∏ –Ω–∞ —Ü–∏—Ñ—Ä—É 0\n\n–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–º–∞–Ω–¥—É —Å–Ω–æ–≤–æ!`,
                        {
                            reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                            parse_mode: 'Markdown' 
                        }
                    );
                    return;
                }                
                const playerId = processHashtag(tag);
        
                if (playerId === 0){
                    await ctx.telegram.editMessageText(ctx.message.chat.id, ctx.session.MessageID, null,`üîå | –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ —Ç–µ–≥! [–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Ç–µ–≥?](${"https://telegra.ph/Gde-najti-TEG-igroka-10-15"})`,
                        {
                            reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                            parse_mode: 'Markdown' 
                        }
                    );
                    return;
                }
                if(playerId === ctx.session.LowID2Recovery){
                    await ctx.telegram.editMessageText(ctx.message.chat.id, ctx.session.MessageID, null,`üîå | –í—ã –¥–æ–ª–∂–Ω—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç, –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–≥!`,
                        {
                            reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                            parse_mode: 'Markdown' 
                        }
                    );
                    return;
                }
                const newacc = await database.getAccount(playerId);
                const oldacc = await database.getAccount(ctx.session.LowID2Recovery);
      
                if(newacc.token === null) return await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ —Ä–∞–∑!`);
                await database.replaceValue(oldacc.lowID, 'token', newacc.token);
                await database.replaceValue(newacc.lowID, 'token', "");
                ctx.session.Tag2Recovery = false;
      
                ctx.session.LowID2Recovery = 0;
                await ctx.telegram.editMessageText(ctx.message.chat.id, ctx.session.MessageID, null,`üîå | –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏ –∑–∞—Ö–æ–¥–∏ –≤ –∏–≥—Ä—É!`,
                    {
                        reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                        parse_mode: 'Markdown' 
                    }
                );
                break
            }
            case (ctx.session.enterTag): {
                const tag = messageText;
                const regex = /[Oo–û–æ]/;
              
                if (regex.test(tag)){
                    await ctx.telegram.editMessageText(ctx.message.chat.id, ctx.session.MessageID, null,`–¢–µ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—É "O"!\n–ó–∞–º–µ–Ω–∏ –Ω–∞ —Ü–∏—Ñ—Ä—É 0\n\n–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–º–∞–Ω–¥—É —Å–Ω–æ–≤–æ!`,
                        {
                            reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                            parse_mode: 'Markdown' 
                        }
                    );
                    return;
                }                
                const playerId = processHashtag(tag);
        
                if (playerId === 0){
                    await ctx.telegram.editMessageText(ctx.message.chat.id, ctx.session.MessageID, null,`üîå | –í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª–∏ —Ç–µ–≥! [–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Ç–µ–≥?](${"https://telegra.ph/Gde-najti-TEG-igroka-10-15"})\n\n–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫–∏, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–≥ —Å–Ω–æ–≤–æ!`,
                        {
                            reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                            parse_mode: 'Markdown' 
                        }
                    );
                    return;
                }
        
                ctx.session.enterTag = false;
                await ctx.telegram.editMessageText(ctx.message.chat.id, ctx.session.MessageID, null,`–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ [—Å—ã–ª–ª–∫–µ (–ñ–ú–ò –°–Æ–î–ê)](https://pay.cloudtips.ru/p/9d269722)\n\n–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É: ${ctx.session.cost}\n–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ç–µ–≥: ${tag}\n–ü–ï–†–ï–í–û–î–ò–¢–ï –¢–û–ß–ù–£–Æ –°–£–ú–ú–£, –ï–°–õ–ò –û–®–ò–ë–ï–¢–ï–°–¨ –í –°–£–ú–ú–ï –¢–û –ú–´ –ò–ú–ï–ï–ú –ü–†–ê–í–û –ù–ï –í–´–î–ê–í–ê–¢–¨ –¢–û–í–ê–† –ò –†–ê–°–¶–ï–ù–ò–¢–¨ –û–ü–õ–ê–¢–£ –ö–ê–ö –ü–û–î–ê–†–û–ö1`,
                    {
                        reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                        parse_mode: 'Markdown' 
                    }
                );
                break;
            }
            case (messageText.startsWith('/GetHelp')): {
                if (!config.admins.includes(parseInt(userId))) return await ctx.reply('–ù–µ—Ç –ø—Ä–∞–≤! ' + userId);
                await ctx.reply(
                    `/getID - –£–∑–Ω–∞—Ç—å lowID –ò–≥—Ä–æ–∫–∞\n
                    /reward #2PP 170 - –í—ã–¥–∞—Ç—å –ò–≥—Ä–æ–∫—É 170 –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤\n
                    /ResetAllShop - –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ–º –º–∞–≥–∞–∑–∏–Ω\n
                    /addAllShop | giveoffers - –Ω—É —Ç—É—Ç —Å–æ—Ö—Ä—ã\n
                    /delshop - –û—Ç—á–∏—Å—Ç–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω –∏–≥—Ä–æ–∫—É\n
                    /replace #2PP Box 100 - –í—ã–¥–∞—Ç—å –ò–≥—Ä–æ–∫—É –†–µ—Å—ã 'Gems','Box','Gold','BigBox','Starpoints','Tickets','TokensDoubler'\n
                    /vipADD #2PP - –í—ã–¥–∞—Ç—å –í–∏–ø–∫—É\n
                    /ban #2PP - –í—ã–¥–∞—Ç—å –±–∞–Ω\n
                    /clubban #8GG NEW_NAME - –°–º–µ–Ω–∏—Ç—å –∏–º—è –∫–ª—É–±–∞\n
                    /Statistics - –°—Ç–∞—Ç–∞`
                );
                break;
            }
            case (messageText.startsWith('/getID')): {
                const info = messageText.split(' ');
                await ctx.reply(`–£—Å–ø–µ—à–Ω–æ! ${parseInt(processHashtag(info[1]))}`);
                break;
            }
            case (messageText.startsWith('/reward')): {
                if (!config.admins.includes(parseInt(userId))) return await ctx.reply('–ù–µ—Ç –ø—Ä–∞–≤! ' + userId);
              
                const commandParams = messageText.split(' ');
                if (commandParams.length !== 3)  return await ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.');
              
                const hashtag = commandParams[1];
                const value = commandParams[2];
      
                const returnedID = processHashtag(hashtag);
                if (returnedID === 0) return await ctx.reply('–ë—É–∫–≤—É –û –Ω–∞ —Ü–∏—Ñ—Ä—É 0 –¥–∞.');
              
                const account = await database.getAccount(parseInt(returnedID));
                if (account === null) return await ctx.reply('–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                
                account.Notification.push({
                  ID: 89,
                  index: account.Notification.length*2,
                  reward: value,
                  type: 0,
                  date: new Date(),
                  claim: false,
                  text: ``
                })
                
                await database.replaceValue(returnedID, 'Notification', account.Notification);
      
                await ctx.reply('–£—Å–ø–µ—à–Ω–æ!');
                break;
            }
            case (messageText.startsWith('/ResetAllShop')): {
                if(!config.admins.includes(parseInt(userId))){
                    await ctx.reply('–ù–µ—Ç –ø—Ä–∞–≤!' + userId);
                    break
                }
                await database.resetShop();
                await ctx.reply(`–£—Å–ø–µ—à–Ω–æ!`);
            }
            case (messageText.startsWith('/setback')): {
                if(!config.admins.includes(parseInt(userId))){
                    await ctx.reply('–ù–µ—Ç –ø—Ä–∞–≤!' + userId);
                    break
                }
				const commandParams = messageText.split(' ');
                const id = commandParams[1];
				if (commandParams.length !== 1) return await ctx.reply(`–î–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–æ–Ω–æ–≤ ${array}\n/setback 1`)

				const array = [0, 1, 2, 3, 5, 6, 7, 8, 11];
				
				if(!array.includes(id)) return await ctx.reply(`–î–æ—Å—Ç—É–ø–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–æ–Ω–æ–≤ ${array}`);
				global.backgroundID = id;
                await ctx.reply(`–£—Å–ø–µ—à–Ω–æ!`);
            }
            case (messageText.startsWith('/addAllShop')): {
                if(!config.admins.includes(parseInt(userId))){
                  await ctx.reply('–ù–µ—Ç –ø—Ä–∞–≤!' + userId);
                  break
                }
                const commandParams = messageText.split(' ');
                const offerData = commandParams.slice(1).join(' ');
                await new Shop().giftAllPlayer(JSON.parse(offerData));
                await ctx.reply('–£—Å–ø–µ—à–Ω–æ!');
                break;
              }
              case (messageText.startsWith('/giveoffers')): {
                const commandParams = messageText.split(' ');
      
                if (commandParams.length < 3) return await ctx.reply('–ö–æ–º–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
      
                const hashtag = commandParams[1];
                const offerData = commandParams.slice(2).join(' ');
      
                const account = await database.getAccount(parseInt(processHashtag(hashtag)));
      
                if (!account) return await ctx.reply('–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
      
                const OffersParsed = JSON.parse(offerData)
                const EndDate = new Date()
                EndDate.setDate(EndDate.getDate() + 1);
                EndDate.setHours(9, 0, 0, 0);
        
                OffersParsed.EndDate = EndDate;
                OffersParsed.claim = false;
      
                account.Shop.push(OffersParsed);
      
                await database.replaceValue(account.lowID, 'Shop', account.Shop);
      
                await ctx.reply('–ù–æ–≤–∞—è –∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞.');
                break;
            }
            case (messageText.startsWith('/delshop')): {
              if(!config.admins.includes(parseInt(userId))){
                await ctx.reply('–ù–µ—Ç –ø—Ä–∞–≤!' + userId);
                break
              }
              const commandParams = messageText.split(' ');
      
              if (commandParams.length < 2) {
                await ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.');
              }
              const playerId = processHashtag(commandParams[1]);
      
              await database.replaceValue(parseInt(playerId), 'Shop', []);
      
              await ctx.reply('–ê–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã!');
              break;
            }
            case (messageText.startsWith('/replace')): {
              if (!config.admins.includes(parseInt(userId))) {
                await ctx.reply('–ù–µ—Ç –ø—Ä–∞–≤!' + userId);
                break;
              }
            
              const commandParams = messageText.split(' ');
              if (commandParams.length !== 4) {
                await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã');
                break;
              }
            
              const hashtag = commandParams[1];
              const resourceType = commandParams[2];
              const value = commandParams[3];
      
              const returnedID = processHashtag(hashtag);
              if (returnedID === 0) {
                return await ctx.reply('–ë—É–∫–≤—É –û –Ω–∞ —Ü–∏—Ñ—Ä—É 0 –¥–∞.');
              }
            
              const account = await database.getAccount(parseInt(returnedID));
            
              const Resources = {
                Gems: 'Gems',
                Box: 'Box',
                Gold: 'Gold',
                BigBox: 'BigBox',
                Starpoints: 'Starpoints',
                Tickets: 'Tickets',
                TokensDoubler: 'TokensDoubler'
                };
            
              if (resourceType === 'Name') {
                await database.replaceValue(account.lowID, resourceType, value);
              } else if (resourceType === 'Skins') {
                if (value === '[]') {
                  await database.replaceValue(account.lowID, resourceType, []);
                } else {
                  account.Skins.push(parseInt(value));
                  await database.replaceValue(account.lowID, resourceType, account.Skins);
                }
              } else if (Resources.hasOwnProperty(resourceType)) {
                account.Resources[resourceType] += parseInt(value);
                await database.replaceValue(account.lowID, 'Resources', account.Resources);
              } else {
                await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞');
                break;
              }
            
              await ctx.reply('–£—Å–ø–µ—à–Ω–æ!');
              break;
            }
            case (messageText.startsWith('/vipADD')): {
              if(!config.admins.includes(parseInt(userId))){
                await ctx.reply('–ù–µ—Ç –ø—Ä–∞–≤!' + userId);
                break
              }
              const commandParams = ctx.message.text.split(' ');
                
              const playerId = processHashtag(commandParams[1]);
              const account = await database.getAccount(parseInt(playerId))
              var find2vip = tgacc.find(e => e.lowID === playerId)
              //if(find2vip !== null) await ctx.telegram.sendMessage(find2vip.id, `–í—ã –ø–æ–ª—É—á–∏–ª–∏ ${config.serverName}Premium\n–£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!`);
              if(account){
                account.Notification.push({
                    ID: 89,
                    index: account.Notification.length+1,
                    reward: 170,
                    type: 0,
                    date: new Date(),
                    claim: false,
                    text: ``
                  })
                  
                  await database.replaceValue(playerId, 'Notification', account.Notification);
                const newVip = { id: parseInt(playerId) };
                vips.push(newVip);
                fs.writeFile('./Laser.Server/vips.json', JSON.stringify(vips, null, 2), (err) => {
                  if (err) {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:', err);
                  }
                });
              } else return await ctx.reply(`–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
              await ctx.reply(`–í—ã–¥–∞–ª–∏. ${playerId}`);
              break;
              }
            case (messageText.startsWith('/ban')): {
              if(!config.admins.includes(parseInt(userId))){
                await ctx.reply('–ù–µ—Ç –ø—Ä–∞–≤!' + userId);
                break
              }
              const commandParams = ctx.message.text.split(' ');
                
              const playerId = processHashtag(commandParams[1]);
              if (playerId === 0) return await ctx.reply('–ë—É–∫–≤—É –û –Ω–∞ —Ü–∏—Ñ—Ä—É 0 –¥–∞.')
      
                await database.replaceValue(playerId, 'Brawlers', [])
                await database.replaceValue(playerId, 'Trophies', 0)
                await database.replaceValue(playerId, 'Name', "–ó–∞–±–∞–Ω–µ–Ω")
      
                await ctx.reply(`–ó–∞–±–∞–Ω–µ–Ω`);
                break;
              }
            case (messageText.startsWith('/clubban')): {
              if(!config.admins.includes(parseInt(userId))){
                await ctx.reply('–ù–µ—Ç –ø—Ä–∞–≤!' + userId);
                break
              }
              const commandParams = ctx.message.text.split(' ');
                
              const clubID = processHashtag(commandParams[1]);
              if (clubID === 0) return await ctx.reply('–ë—É–∫–≤—É –û –Ω–∞ —Ü–∏—Ñ—Ä—É 0 –¥–∞.')
                const c = {
                    'Name': commandParams[2],
                };
                await database.clubUpdate(clubID, c);
      
                await ctx.reply(`–ó–∞–±–∞–Ω–µ–Ω`);
                break;
            }
      
      
            case (messageText.startsWith('/Statistics')): {
              if (!config.admins.includes(parseInt(userId))) {
                await ctx.reply('–ù–µ—Ç –ø—Ä–∞–≤!' + userId);
                break;
              }
              const rooms = gameroomInstance.getRooms();
              const currentDate = new Date();
              const StatisticsCollected = `${currentDate.getDate()}.${currentDate.getMonth() + 1}.${currentDate.getFullYear()} ${currentDate.getHours()}:${currentDate.getMinutes() < 10 ? '0' + currentDate.getMinutes() : currentDate.getMinutes()}`;
              const ServerStarted = `${global.ServerStarted.getDate()}.${global.ServerStarted.getMonth() + 1}.${global.ServerStarted.getFullYear()} ${global.ServerStarted.getHours()}:${global.ServerStarted.getMinutes() < 10 ? '0' + global.ServerStarted.getMinutes() : global.ServerStarted.getMinutes()}`;
              const rd = await database.getCounts();

              const SessionsData = await fs.readFile('./sessions.json', 'utf8');
              const SessionsParsed = JSON.parse(SessionsData);
              const data = {
                "–°–µ—Ä–≤–µ—Ä –±—ã–ª –∑–∞–ø—É—â–µ–Ω": ServerStarted,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤": global.online,
                "–ò–≥—Ä–æ–∫–æ–≤ –≤ –¥–µ–Ω—å": rd.infodau,
                "–°–æ–∑–¥–∞–Ω–æ –ö–æ–º–∞–Ω–¥": rooms.length,
                "–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤": rd.accountCount,
                "–í—Å–µ–≥–æ –ö–ª—É–±–æ–≤": rd.clubCount,
				"–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–æ—Ç–µ" : SessionsParsed.sessions.length,
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –°–æ–±—Ä–∞–Ω–∞": StatisticsCollected
              };
              let reply = "";
              for (const key in data) {
                  reply += `"${key}": ${data[key]}\n`;
              }
              await ctx.reply(reply);
              break;
            }
            case (messageText.startsWith('/Send')): {
				const commandParams = ctx.message.text.split(' ');
				const messageToSend = commandParams.slice(1).join(' ').replace(/\\n/g, '\n');
				if (messageToSend.length === 0) return await ctx.reply(`–¢–µ–∫—Å—Ç–∞ –Ω–µ—Ç—É –ª–æ–ª.`);
				const SessionsData = await fs.readFile('./sessions.json', 'utf8');
				const SessionsParsed = JSON.parse(SessionsData);

				const ids = [];
				SessionsParsed.sessions.forEach(session => {
					const sessionId = session.id.split(':')[0];
					if (!ids.includes(Number(sessionId))) {
						ids.push(Number(sessionId));
					}
				});
				var accepted = 0
				var cancled = 0
				for (const id of ids) {
					try {
						await bot.telegram.sendMessage(id, messageToSend);
						console.log(`Message sent to ${id}`);
						accepted += 1
					} catch (error) {
						cancled += 1
						console.error(`Error sending message to ${id}:`, error);
					}
				}
				return await ctx.reply(`${accepted} –ü—Ä–∏–Ω—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ | ${cancled} –ù–µ –ø–æ–ª—É—á–∏–ª–∏.`);
			}
            default: {
                await ctx.reply(`–ö–æ–º–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n–ù–∞–ø–∏—à–∏—Ç–µ /start`);
                break;
            }
        }
    } catch (error) {
        console.log(error)
        config.admins.forEach(async e  => { await ctx.telegram.sendMessage(e, error);});
    }
});

bot.on('callback_query', async (ctx) => {
    const query = ctx.callbackQuery;
    switch(query.data){

        case "DonateMenu": {
            await DonateMenu(ctx);
            break;
        };
        case "MainMenu": {
            ctx.session.enterTag = false;
            ctx.session.Tag2Recovery = false;
            ctx.session.ConnectAccount = false;
            await MainMenu(ctx);
            break;
        };
        case "PremiumInfo": {
            await PremiumInfo(ctx);
            break;
        }
        case "Supports": {
            await Supports(ctx);
            break;
        }
        default: {
            if (query.data.startsWith("Account")) {
                await HandleAccount(ctx);
            }
            if (query.data.startsWith("Unlink")) {
                await UnlinkAccount(ctx);
            }
            if (query.data.startsWith("SPT")) {
                await SPT(ctx);
            }
            if (query.data.startsWith("Recovery")) {
                await Recovery(ctx);
            }
            break;
        }
    }
});

async function Supports(ctx) {
    try {
        await ctx.answerCbQuery();
        const messageText = `‚úÖ | –ó–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å/–ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –ø–∏—à–∏—Ç–µ - @thestealdev!`;
        await ctx.telegram.editMessageText(
            ctx.chat.id, ctx.session.MessageID, null,
            messageText,
            {
                reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                parse_mode: 'Markdown' 
            }
        );
    } catch (error) {
        console.log(error)
        config.admins.forEach(async e => { await ctx.telegram.sendMessage(e, error); });
    }
}

async function SPT(ctx) {
    await ctx.answerCbQuery();
    ctx.session.cost = parseInt(ctx.callbackQuery.data.split('_')[1]);
    var msg = ""
    if(ctx.session.cost === 99) msg = `${config.serverName} premium`
    if(ctx.session.cost !== 99) msg = `–∫—Ä–∏—Å—Ç–∞–ª–ª—ã`
    ctx.session.enterTag = true;
    await ctx.editMessageText(
        `üëá –í–≤–µ–¥–∏ —Å–≤–æ–π #–¢–ï–ì –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–ª—É—á–∏—à—å ${msg} –í–≤–æ–¥–∏ —Å–≤–æ–π —Ç–µ–≥ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.\n[–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Ç–µ–≥? (–ñ–ú–ò –°–Æ–î–ê)](${"https://telegra.ph/Gde-najti-TEG-igroka-10-15"})`,
        {
            reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
            parse_mode: 'Markdown' 
        }
    );
}

async function PremiumInfo(ctx){
    try {
        await ctx.answerCbQuery();
        await ctx.editMessageText(
            `–¶–µ–Ω–∞ –ù–ê–í–°–ï–ì–î–ê: 99 —Ä—É–±–ª–µ–π.\n\n` +
            `Mix Premium ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${config.serverName} Brawl, –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–µ—Ä–µ.\n\n` +
            `–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–¥–ø–∏—Å–∫—É?\n` +
            `‚Äî 170 –≥–µ–º–æ–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç\n` +
            `‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç-—Ü–≤–µ—Ç–∞ –Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∞–º —Å ${config.serverName} Premium\n` +
            `‚Äî –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 8 –∫—É–±–∫–æ–≤ –∑–∞ –±–æ–π.\n\n`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ö—É–ø–∏—Ç—å', callback_data: 'SPT_99' },{ text: '–û—Ç–º–µ–Ω–∞', callback_data: `DonateMenu` }]
                    ]
                }
            }
        );
    } catch (error) {
        console.log(error)
        config.admins.forEach(async e => { await ctx.telegram.sendMessage(e, error); });
    }
}

async function UnlinkAccount(ctx) {
    try {
        await ctx.answerCbQuery();
        let accountID = parseInt(ctx.callbackQuery.data.split('_')[1]);
        const messageText = `—É–Ω—Ç –±—ã–ª —É –æ—Ç `;
        tgacc = tgacc.filter(e => e.lowID !== accountID);
        fs.writeFile('./Laser.Server/tgacc.json', JSON.stringify(tgacc, null, 2), (err) => {if (err) {console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π:', err)}});
        await ctx.telegram.editMessageText(
            ctx.chat.id, ctx.session.MessageID, null,
            messageText,
            {
                reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                parse_mode: 'Markdown' 
            }
        );
    } catch (error) {
        console.log(error)
        config.admins.forEach(async e => { await ctx.telegram.sendMessage(e, error); });
    }
}

async function Recovery(ctx) {
    try{
        await ctx.answerCbQuery();
        let accountID = parseInt(ctx.callbackQuery.data.split('_')[1]);
        const messageText = `üîå | –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞, –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Ç–µ–≥ –∞–∫–∫–∞—É–Ω—Ç–∞ [(–ñ–ú–ò –°–Æ–î–ê)](${"https://telegra.ph/Kak-uznat-svoj-TEG-ID-v-TailerBrawl-06-17"}})\n–û—Ç–ø—Ä–≤—å—Ç–µ —Ç–µ–≥ –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —á–∞—Ç.`;
        ctx.session.Tag2Recovery = true;
        ctx.session.LowID2Recovery = accountID;
        await ctx.telegram.editMessageText(
            ctx.chat.id, ctx.session.MessageID, null,
            messageText,
            {
                reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                parse_mode: 'Markdown' 
            }
        );
    } catch (error) {
        config.admins.forEach(async e => { await ctx.telegram.sendMessage(e, error); });
    }
}

async function HandleAccount(ctx) {
    try {
        await ctx.answerCbQuery();
        let accountID = parseInt(ctx.callbackQuery.data.split('_')[1]);
        const acc = await database.getAccount(accountID)
		if(acc !== null){
			const messageText = `üîå | –ü—Ä–∏–≤–µ—Ç, ${acc.Name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–æ—Ñ–µ–µ–≤: ${acc.Trophies}\n–ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤: ${Math.round(acc.Resources.Gems)}\n\n‚ö† –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ üçÇ–û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç,\n –ê–ö–ö–ê–£–ù–¢ –°–†–ê–ó–£ –û–¢–í–Ø–ñ–ï–¢–°–Ø!`;
			await ctx.telegram.editMessageText(
				ctx.chat.id, ctx.session.MessageID, null,
				messageText,
				{
					reply_markup: {inline_keyboard: [[{ text: `‚ö°–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç`, callback_data: `Recovery_${accountID}` }],[{ text: `üçÇ–û—Ç–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç`, callback_data: `Unlink_${accountID}` }],[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
					parse_mode: 'Markdown' 
				}
			);
		}
    } catch (error) {
        config.admins.forEach(async e => { await ctx.telegram.sendMessage(e, error); });
    }
}


async function ConnectAccount(ctx) {
    try {
        await ctx.answerCbQuery();
        const messageText = `Mix Connect –ø–µ—Ä–µ–µ—Ö–∞–ª –Ω–∞ —Å–∞–π—Ç –≤ –∏–≥—Ä–µ\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É "–ù–æ–≤–æ—Å—Ç–∏".`;
        ctx.session.ConnectAccount = true;
        await ctx.telegram.editMessageText(
            ctx.chat.id, ctx.session.MessageID, null,
            messageText,
            {
                reply_markup: {inline_keyboard: [[{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]]},
                parse_mode: 'Markdown' 
            }
        );
    } catch (error) {
        config.admins.forEach(async e => { await ctx.telegram.sendMessage(e, error); });
    }
}


async function AccountsList(ctx) {
    try{
        await ctx.answerCbQuery();
        var ListKeyboard = [];
        const Acc2Players = tgacc.filter(plr => plr.id === ctx.chat.id)
        for (const e of Acc2Players){
            const acc = await database.getAccount(e.lowID)
            if(acc !== null) ListKeyboard.push([{ text: `${acc.Name} | ${acc.Trophies} –ö—É–±–∫–æ–≤`, callback_data: `Account_${e.lowID}` }]);
        }
        ListKeyboard.push([{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }])
        await ctx.telegram.editMessageText(
            ctx.chat.id, ctx.session.MessageID, null,
            `–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–æ—Ç–µ`,
            {
                reply_markup: {inline_keyboard: ListKeyboard}
            }
        );
    } catch (error) {
        config.admins.forEach(async e  => { await ctx.telegram.sendMessage(e, error);});
    }
}

async function DonateMenu(ctx) {
    try{
        await ctx.answerCbQuery();
        await ctx.telegram.editMessageText(
            ctx.chat.id, ctx.session.MessageID, null,
            `üîç | –í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å:`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: `${config.serverName} Premium`, callback_data: `PremiumInfo` }],
                        [{ text: `170 –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤`, callback_data: `SPT_100` }],
                        [{ text: `360 –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤`, callback_data: `SPT_150` }],
                        [{ text: `950 –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤`, callback_data: `SPT_250` }],
                        [{ text: `2000 –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤`, callback_data: `SPT_400` }],
                        [{ text: `4500 –ö—Ä–∏—Å—Ç–∞–ª–ª–æ–≤`, callback_data: `SPT_600` }],
                        [{ text: `‚óÄ –ù–∞–∑–∞–¥`, callback_data: `MainMenu` }]
                    ]
                }
            }
        );
    } catch (error) {
        config.admins.forEach(async e  => { await ctx.telegram.sendMessage(e, error);});
    }
}

async function MainMenu(ctx) {
    try{
        await ctx.answerCbQuery();
        await ctx.telegram.editMessageText(
            ctx.chat.id, ctx.session.MessageID, null, 
            `üí´ | –ü—Ä–∏–≤–µ—Ç!\n\n–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ ${config.serverName}Brawl`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üí∞ –î–æ–Ω–∞—Ç', callback_data: `DonateMenu` },{ text: 'üë• –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: `Supports` }]
                    ]
                }
            }
        );
    } catch (error) {
        config.admins.forEach(async e  => { await ctx.telegram.sendMessage(e, error);});
    }
}

bot.catch((err, ctx) => {
    if (err.code === 403 && err.description.includes('blocked by the user')) return;
    console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', err);
});

module.exports = bot;
